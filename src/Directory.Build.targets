<?xml version="1.0" encoding="utf-8"?>
<!-- Based on https://github.com/terrafx/terrafx/blob/master/Directory.Build.props -->
<!-- Copyright Â© Tanner Gooding and Contributors -->
<Project>

  <!--
    Directory.Build.targets is automatically picked up and imported by
    Microsoft.Common.targets. This file needs to exist, even if empty so that
    files in the parent directory tree, with the same name, are not imported
    instead. The import fairly late and most other props/targets will have
    been imported beforehand. We also don't need to add ourselves to
    MSBuildAllProjects, as that is done by the file that imports us.
  -->

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileDirectory)..\Directory.Build.targets</MSBuildAllProjects>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)..\Directory.Build.targets" />

  <PropertyGroup>
    <GeneratedInternalsVisibleToFile Condition="'$(GeneratedInternalsVisibleToFile)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).InternalsVisibleTo$(DefaultLanguageSourceExtension)</GeneratedInternalsVisibleToFile>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <InternalsVisibleTo>
      <Visible>false</Visible>
    </InternalsVisibleTo>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup>
    <ThermiteNative>
    </ThermiteNative>
  </ItemDefinitionGroup>

  <ItemGroup>
    <ProjectReference Include="@(ThermiteNative)">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <OutputItemType>None</OutputItemType>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <IncludeAssets>native;build</IncludeAssets>
    </ProjectReference>
  </ItemGroup>

  <!--
    HACK: We trick NuGet here into including our natives in the restore graph
    so that both a local build and a CI build work correctly.
  -->
  <Target Name="PreTrickNugetProjectRestoreGraph"
          BeforeTargets="_GenerateProjectRestoreGraphPerFramework">
    <ItemGroup>
      <ProjectReference Update="@(ThermiteNative)">
        <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <Target Name="PostTrickNugetProjectRestoreGraph"
          AfterTargets="_GenerateProjectRestoreGraphPerFramework">
    <ItemGroup>
      <ProjectReference Update="@(ThermiteNative)">
        <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <Target Name="GenerateInternalsVisibleTo"
          BeforeTargets="CoreCompile"
          DependsOnTargets="PrepareForBuild;CoreGenerateInternalsVisibleTo"
          Condition="'@(InternalsVisibleTo)' != ''" />

  <Target Name="CoreGenerateInternalsVisibleTo"
          Condition="'$(Language)' == 'VB' or '$(Language)' == 'C#'"
          Inputs="$(MSBuildAllProjects)"
          Outputs="$(GeneratedInternalsVisibleToFile)">
    <CreateItem Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute" AdditionalMetadata="_Parameter1=%(InternalsVisibleTo.Identity)" Condition="'%(InternalsVisibleTo.PublicKey)' == ''">
      <Output TaskParameter="Include" ItemName="InternalsVisibleToAttribute" />
    </CreateItem>
    <CreateItem Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute" AdditionalMetadata="_Parameter1=%(InternalsVisibleTo.Identity), PublicKey=%(InternalsVisibleTo.PublicKey)" Condition="'%(InternalsVisibleTo.PublicKey)' != ''">
      <Output TaskParameter="Include" ItemName="InternalsVisibleToAttribute" />
    </CreateItem>

    <WriteCodeFragment AssemblyAttributes="@(InternalsVisibleToAttribute)" Language="$(Language)" OutputFile="$(GeneratedInternalsVisibleToFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>

  <!-- Empty target so that `dotnet test` will work on the solution -->
  <!-- https://github.com/Microsoft/vstest/issues/411 -->
  <Target Name="VSTest" />

</Project>
